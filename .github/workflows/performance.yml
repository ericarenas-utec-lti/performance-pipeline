name: Automated Performance Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  performance:
    name: Performance Tests with JMeter
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create directory structure
      shell: pwsh
      run: |
        Write-Host "üìÅ Creating project structure..."
        New-Item -ItemType Directory -Path "test-plans", "config", "results" -Force
        Get-ChildItem -Recurse
        
    - name: Clean results directory
      shell: pwsh
      run: |
        Write-Host "üßπ Cleaning previous results..."
        if (Test-Path "results") {
            Remove-Item -Path "results" -Recurse -Force
        }
        New-Item -ItemType Directory -Path "results" -Force
        
    - name: Run JMeter performance tests with HTML report
      shell: pwsh
      run: |
        Write-Host "üöÄ Running JMeter performance tests..."
        
        # Ejecutar JMeter y generar reporte HTML
        docker run --rm `
          -v "$PWD/test-plans:/test-plans" `
          -v "$PWD/results:/results" `
          justb4/jmeter:5.5 `
          -n -t /test-plans/api-performance.jmx `
          -l /results/results.jtl `
          -e -o /results/html-report `
          -Jthreads=5 `
          -Jrampup=15 `
          -Jduration=30
          
    - name: Verify results were generated
      shell: pwsh
      run: |
        Write-Host "‚úÖ Checking generated files..."
        Get-ChildItem "results" -Recurse
        if (Test-Path "results/results.jtl") {
            $lineCount = (Get-Content "results/results.jtl" | Measure-Object -Line).Lines
            Write-Host "üìà Results file: $lineCount lines"
        } else {
            Write-Host "‚ùå No results file generated"
            exit 1
        }
        
    - name: Verify performance thresholds
      shell: pwsh
      run: |
        Write-Host "üìä Verifying performance thresholds..."
        .\config\check-thresholds.ps1 "results/results.jtl"
          
    - name: Upload HTML Report Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jmeter-html-dashboard
        path: results/html-report/
        retention-days: 30
        overwrite: true
        
    - name: Upload Test Results Artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jmeter-raw-results
        path: results/
        retention-days: 30
        overwrite: true
        
    - name: Display performance summary
      shell: pwsh
      run: |
        Write-Host "üìà PERFORMANCE TEST SUMMARY" -ForegroundColor Cyan
        Write-Host "============================" -ForegroundColor Cyan
        
        if (Test-Path "results/results.jtl") {
            $content = Get-Content "results/results.jtl"
            
            # Contar requests - m√©todo para CSV
            $totalRequests = 0
            $errorRequests = 0
            
            if ($content[0] -match "timeStamp,elapsed,label") {
                # Formato CSV - contar l√≠neas despu√©s del header
                $totalRequests = $content.Count - 1
                $errorRequests = ($content | Select-String ",false,").Count
            } else {
                # Formato XML
                $totalRequests = ($content | Select-String "<httpSample").Count
                $errorRequests = ($content | Select-String 's="false"').Count
            }
            
            Write-Host "‚úÖ Total Requests: $totalRequests" -ForegroundColor Green
            Write-Host "‚ùå Error Requests: $errorRequests" -ForegroundColor Red
            
            if ($totalRequests -gt 0) {
                $errorRate = [math]::Round(($errorRequests / $totalRequests) * 100, 2)
                Write-Host "üìä Error Rate: ${errorRate}%" -ForegroundColor Yellow
            }
        } else {
            Write-Host "‚ùå No results file generated" -ForegroundColor Red
        }
        
        if (Test-Path "results/html-report/index.html") {
            Write-Host "üåê HTML Dashboard: Generated and available as artifact" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è HTML Dashboard: Not generated" -ForegroundColor Yellow
        }
        
        Write-Host "" 
        Write-Host "üì¶ Artifacts Available:" -ForegroundColor Cyan
        Write-Host "   - jmeter-html-dashboard: Interactive performance dashboard" -ForegroundColor Gray
        Write-Host "   - jmeter-raw-results: Raw test results and logs" -ForegroundColor Gray